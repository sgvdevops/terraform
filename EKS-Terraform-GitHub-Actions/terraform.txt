Terraform will perform the following actions:

  # module.eks.data.aws_iam_policy_document.eks_oidc_assume_role_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "eks_oidc_assume_role_policy" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRoleWithWebIdentity",
            ]
          + effect  = "Allow"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "system:serviceaccount:default:aws-test",
                ]
              + variable = (known after apply)
            }

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "Federated"
            }
        }
    }

  # module.eks.data.tls_certificate.eks-certificate will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "eks-certificate" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks.aws_eip.ngw-eip will be created
  + resource "aws_eip" "ngw-eip" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "dev-poc-elasticip-ngw"
        }
      + tags_all             = {
          + "Name" = "dev-poc-elasticip-ngw"
        }
      + vpc                  = (known after apply)
    }

  # module.eks.aws_eks_addon.eks-addons["0"] will be created
  + resource "aws_eks_addon" "eks-addons" {
      + addon_name           = "vpc-cni"
      + addon_version        = "v1.18.1-eksbuild.1"
      + arn                  = (known after apply)
      + cluster_name         = "dev-poc-eks-cluster"
      + configuration_values = (known after apply)
      + created_at           = (known after apply)
      + id                   = (known after apply)
      + modified_at          = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.eks.aws_eks_addon.eks-addons["1"] will be created
  + resource "aws_eks_addon" "eks-addons" {
      + addon_name           = "coredns"
      + addon_version        = "v1.11.1-eksbuild.9"
      + arn                  = (known after apply)
      + cluster_name         = "dev-poc-eks-cluster"
      + configuration_values = (known after apply)
      + created_at           = (known after apply)
      + id                   = (known after apply)
      + modified_at          = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.eks.aws_eks_addon.eks-addons["2"] will be created
  + resource "aws_eks_addon" "eks-addons" {
      + addon_name           = "kube-proxy"
      + addon_version        = "v1.29.3-eksbuild.2"
      + arn                  = (known after apply)
      + cluster_name         = "dev-poc-eks-cluster"
      + configuration_values = (known after apply)
      + created_at           = (known after apply)
      + id                   = (known after apply)
      + modified_at          = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.eks.aws_eks_addon.eks-addons["3"] will be created
  + resource "aws_eks_addon" "eks-addons" {
      + addon_name           = "aws-ebs-csi-driver"
      + addon_version        = "v1.30.0-eksbuild.1"
      + arn                  = (known after apply)
      + cluster_name         = "dev-poc-eks-cluster"
      + configuration_values = (known after apply)
      + created_at           = (known after apply)
      + id                   = (known after apply)
      + modified_at          = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.eks.aws_eks_cluster.eks[0] will be created
  + resource "aws_eks_cluster" "eks" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + cluster_id            = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "dev-poc-eks-cluster"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags                  = {
          + "Env"  = "dev"
          + "Name" = "dev-poc-eks-cluster"
        }
      + tags_all              = {
          + "Env"  = "dev"
          + "Name" = "dev-poc-eks-cluster"
        }
      + version               = "1.30"

      + access_config {
          + authentication_mode                         = "CONFIG_MAP"
          + bootstrap_cluster_creator_admin_permissions = true
        }

      + kubernetes_network_config (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = false
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.ondemand-node will be created
  + resource "aws_eks_node_group" "ondemand-node" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = "ON_DEMAND"
      + cluster_name           = "dev-poc-eks-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t2.micro",
        ]
      + labels                 = {
          + "type" = "ondemand"
        }
      + node_group_name        = "dev-poc-eks-cluster-on-demand-nodes"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags                   = {
          + "Name" = "dev-poc-eks-cluster-ondemand-nodes"
        }
      + tags_all               = {
          + "Name" = "dev-poc-eks-cluster-ondemand-nodes"
        }
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 2
          + max_size     = 2
          + min_size     = 2
        }

      + update_config {
          + max_unavailable = 1
        }
    }

  # module.eks.aws_eks_node_group.spot-node will be created
  + resource "aws_eks_node_group" "spot-node" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = "SPOT"
      + cluster_name           = "dev-poc-eks-cluster"
      + disk_size              = 20
      + id                     = (known after apply)
      + instance_types         = [
          + "t2.micro",
        ]
      + labels                 = {
          + "lifecycle" = "spot"
          + "type"      = "spot"
        }
      + node_group_name        = "dev-poc-eks-cluster-spot-nodes"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags                   = {
          + "Name" = "dev-poc-eks-cluster-spot-nodes"
        }
      + tags_all               = {
          + "Name" = "dev-poc-eks-cluster-spot-nodes"
        }
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 2
          + max_size     = 2
          + min_size     = 2
        }

      + update_config {
          + max_unavailable = 1
        }
    }

  # module.eks.aws_iam_openid_connect_provider.eks-oidc will be created
  + resource "aws_iam_openid_connect_provider" "eks-oidc" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks.aws_iam_policy.eks-oidc-policy will be created
  + resource "aws_iam_policy" "eks-oidc-policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "test-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListAllMyBuckets",
                          + "s3:GetBucketLocation",
                          + "*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.eks.aws_iam_role.eks-cluster-role[0] will be created
  + resource "aws_iam_role" "eks-cluster-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.eks-nodegroup-role[0] will be created
  + resource "aws_iam_role" "eks-nodegroup-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.eks_oidc will be created
  + resource "aws_iam_role" "eks_oidc" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-oidc"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.AmazonEKSClusterPolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.eks-AmazonEBSCSIDriverPolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks-AmazonEBSCSIDriverPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.eks-AmazonEC2ContainerRegistryReadOnly[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks-AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.eks-AmazonEKS_CNI_Policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks-AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.eks-AmazonWorkerNodePolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "eks-AmazonWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.eks-oidc-policy-attach will be created
  + resource "aws_iam_role_policy_attachment" "eks-oidc-policy-attach" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "eks-oidc"
    }

  # module.eks.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"                                      = "dev-poc-igw"
          + "env"                                       = "dev"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
        }
      + tags_all = {
          + "Name"                                      = "dev-poc-igw"
          + "env"                                       = "dev"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
        }
      + vpc_id   = (known after apply)
    }

  # module.eks.aws_nat_gateway.ngw will be created
  + resource "aws_nat_gateway" "ngw" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "dev-poc-ngw"
        }
      + tags_all                           = {
          + "Name" = "dev-poc-ngw"
        }
    }

  # module.eks.aws_route_table.private-rt will be created
  + resource "aws_route_table" "private-rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "dev-poc-private-route-table"
          + "env"  = "dev"
        }
      + tags_all         = {
          + "Name" = "dev-poc-private-route-table"
          + "env"  = "dev"
        }
      + vpc_id           = (known after apply)
    }

  # module.eks.aws_route_table.public-rt will be created
  + resource "aws_route_table" "public-rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "dev-poc-public-route-table"
          + "env"  = "dev"
        }
      + tags_all         = {
          + "Name" = "dev-poc-public-route-table"
          + "env"  = "dev"
        }
      + vpc_id           = (known after apply)
    }

  # module.eks.aws_route_table_association.name[0] will be created
  + resource "aws_route_table_association" "name" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.eks.aws_route_table_association.name[1] will be created
  + resource "aws_route_table_association" "name" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.eks.aws_route_table_association.name[2] will be created
  + resource "aws_route_table_association" "name" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.eks.aws_route_table_association.private-rt-association[0] will be created
  + resource "aws_route_table_association" "private-rt-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.eks.aws_route_table_association.private-rt-association[1] will be created
  + resource "aws_route_table_association" "private-rt-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.eks.aws_route_table_association.private-rt-association[2] will be created
  + resource "aws_route_table_association" "private-rt-association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.eks.aws_security_group.eks-cluster-sg will be created
  + resource "aws_security_group" "eks-cluster-sg" {
      + arn                    = (known after apply)
      + description            = "Allow 443 from Jump Server only"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "eks-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "eks-sg"
        }
      + tags_all               = {
          + "Name" = "eks-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_subnet.private-subnet[0] will be created
  + resource "aws_subnet" "private-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.16.128.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-private-1"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/internal-elb"           = "1"
        }
      + tags_all                                       = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-private-1"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/internal-elb"           = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.eks.aws_subnet.private-subnet[1] will be created
  + resource "aws_subnet" "private-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.16.144.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-private-2"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/internal-elb"           = "1"
        }
      + tags_all                                       = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-private-2"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/internal-elb"           = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.eks.aws_subnet.private-subnet[2] will be created
  + resource "aws_subnet" "private-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.16.160.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-private-3"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/internal-elb"           = "1"
        }
      + tags_all                                       = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-private-3"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/internal-elb"           = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.eks.aws_subnet.public-subnet[0] will be created
  + resource "aws_subnet" "public-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.16.0.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-public-1"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/elb"                    = "1"
        }
      + tags_all                                       = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-public-1"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/elb"                    = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.eks.aws_subnet.public-subnet[1] will be created
  + resource "aws_subnet" "public-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.16.16.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-public-2"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/elb"                    = "1"
        }
      + tags_all                                       = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-public-2"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/elb"                    = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.eks.aws_subnet.public-subnet[2] will be created
  + resource "aws_subnet" "public-subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.16.32.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-public-3"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/elb"                    = "1"
        }
      + tags_all                                       = {
          + "Env"                                       = "dev"
          + "Name"                                      = "dev-poc-subnet-public-3"
          + "kubernetes.io/cluster/dev-poc-eks-cluster" = "owned"
          + "kubernetes.io/role/elb"                    = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.eks.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.16.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Env"  = "dev"
          + "Name" = "dev-poc-vpc"
        }
      + tags_all                             = {
          + "Env"  = "dev"
          + "Name" = "dev-poc-vpc"
        }
    }

  # module.eks.random_integer.random_suffix will be created
  + resource "random_integer" "random_suffix" {
      + id     = (known after apply)
      + max    = 9999
      + min    = 1000
      + result = (known after apply)
    }

Plan: 38 to add, 0 to change, 0 to destroy.